# 进程

# 进程的描述

### 进程的定义：一个具有独立功能的程序在一个数据集合上一次动态的执行 过程
### 进程和程序的区别
1. 进程 != 程序，程序是静态的，是有序代码的集合，进程是程序的一个动态的执行过程，进程有核心态/用户态。
核心态：进程需要完成某些特定的功能，比如进行读写文件的操作时，因为涉及硬盘，所以要向操作系统发出请求，在操作系统代表进程在内核中去执行，即这个时候进程属于核心态。
用户态：程序跑在用户态上。
2. 进程是暂时的，程序是永久的：进程是一个状态变化的过程，程序可永久保存。
3. 进程与程序的组成成分不同：进程的组成包括程序、数据和进程控制块（进程状态信息）。

由于执行的数据集合可能不同，所以程序的每一次执行可能构成的都是不同的进程。

### 进程和程序的关系：通过多次执行，一个程序可以对应多个进程，通过调用关系，一个进程可包括多个程序

### 进程的特点
1. 动态性：可动态性地创建、结束进程。
2. 并发性：进程可以被独立调度并占用处理器运行；并发并行。
3. 独立性：不同进程的工作不相互影响。
4. 制约性：因访问共享数据/资源或同步而产生制约。（进程调度问题）
ps:
并发：一段时间内，有多个进程在执行。（如果这个时间范围很小，用户层面就好像在同时执行一样）。
并行：一个时刻，有多个进程在执行（必须有多个CPU才能实现并行）。

### 进程控制结构

进程控制块（Process Control Block）：每一个进程创建时就会生成一个PCB，进程终止时回收PCB。
PCB含有三大类信息：
1. 进程标识信息
2. 寄存器信息
3. 进程控制信息

 
# 进程状态
### 进程的生命周期管理
1. 进程创建、进程运行、进程等待、进程唤醒、进程结束
2. 进程等待事件由自身发起。
3. 唤醒进程的：原因
a. 被阻塞进程需要的资源可被满足
b. 被阻塞进程等待的事件到达
c. 将该进程的PCB插入到就绪队列
4. 进程只能被别的进程或操作系统唤醒。
5. 进程结束有以下四种情形：
a. 正常退出（自愿的）
b. 错误推出（自愿的）
c. 致命错误（强制的）例如：访问其他进程的内存地址空间 这是操作系统不允许的。
d. 被其他进程杀死（强制的）例如：管理进程认为该进程占用内存过多，破坏系统的可靠性或安全性。



### 进程状态变化模型 
基本状态：创建状态、运行状态、就绪状态、等待状态（阻塞状态）、结束状态

处于running态的进程可以切换到ready态。当有多个进程处于就绪态时，因为时间片轮转的调度策略，处于running态的进程分配到的时间片到了且未执行完，就会由操作系统将其切回到ready态。

### 进程挂起状态
挂起（Suspend）：把一个进程从内存转到外村；可能有以下几种情况：
1. 阻塞 --> 阻塞挂起
2. 就绪 --> 就绪挂起
3. 运行 --> 就绪挂起
在外存时的状态转换：
4. 阻塞挂起 --> 就绪挂起

激活/解挂（Active）：把一个进程从外存转到内存；可能有一下几种情况：
1. 就绪挂起 --> 就绪
2. 阻塞挂起 --> 阻塞

### 多进程
当一个程序不能并发的执行（IO和CPU不能最大效率的使用），我们需要使用多进程，将一个程序拆分成几个程序，分为几个进程之后，实现并发执行。

因为创建进程和切换进程涉及的开销较大以及进程之间的通信和共享数据。所有提出了线程的概念。

# 线程

### 线程的概念：进程当中的一条执行流程 
线程 = 进程 - 共享资源（地址空间、访问的网络等）
### 线程的优点
1. 线程之间共享相同的地址空间（即资源共享）。
2. 线程之间可以并发地执行。
3. 一个进程可以同时存在多个线程

### 线程的缺点
1. 一个线程崩溃，会导致所属进程的所有线程崩溃。

使用情况：
强调性能的时候用线程模式设计程序（高性能的计算）
强调安全性的时候用进程模式设计程序（浏览器的实现）。

### 线程的实现



# 进程和线程的比较
1. 进程是资源分配单位，线程是CPU调度单位。
2. 进程拥有一个完整的资源平台，而线程只独享必不可少的资源。如寄存器和堆栈。
3. 线程同样具有就绪、阻塞和执行三种基本状态，同样具有状态之间的转换关系。
4. 线程能减少并发执行的时间和空间开销。






